// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6033.RobotCodeJava2017;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6033.RobotCodeJava2017.commands.*;
import org.usfirst.frc6033.RobotCodeJava2017.subsystems.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton button1;
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button6;
    public Joystick driveStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveStick = new Joystick(0);
        
        button6 = new JoystickButton(driveStick, 6);
        button6.whenPressed(new ShooterOff());
        button5 = new JoystickButton(driveStick, 5);
        button5.whenPressed(new ShooterOn());
        button4 = new JoystickButton(driveStick, 4);
        button4.whenPressed(new ClimberOff());
        button3 = new JoystickButton(driveStick, 3);
        button3.whenPressed(new ClimberOn());
        button2 = new JoystickButton(driveStick, 2);
        button2.whenPressed(new GearClose());
        button1 = new JoystickButton(driveStick, 1);
        button1.whenPressed(new GearOpen());


        // SmartDashboard Buttons
        SmartDashboard.putData("AutoDeliverGearLeftPeg", new AutoDeliverGearLeftPeg());
        SmartDashboard.putData("AutoDeliverGearCenterPeg", new AutoDeliverGearCenterPeg());
        SmartDashboard.putData("AutoDeliverGearRightPeg", new AutoDeliverGearRightPeg());
        SmartDashboard.putData("DriveReturnToSetHeading", new DriveReturnToSetHeading());
        SmartDashboard.putData("DriveArcadeMode", new DriveArcadeMode());
        SmartDashboard.putData("DriveStraight: DEFAULT", new DriveStraight(0.3, 3, 0, 10));
        SmartDashboard.putData("DriveTurn: DEFAULT", new DriveTurn(1, 0.3, 0, 5));
        SmartDashboard.putData("DriveStop: DEFAULT", new DriveStop(0));
        SmartDashboard.putData("ShooterOn", new ShooterOn());
        SmartDashboard.putData("ShooterOff", new ShooterOff());
        SmartDashboard.putData("ClimberOn", new ClimberOn());
        SmartDashboard.putData("ClimberOff", new ClimberOff());
        SmartDashboard.putData("GearClose", new GearClose());
        SmartDashboard.putData("GearOpen", new GearOpen());
        SmartDashboard.putData("CameraDefaultPosition", new CameraDefaultPosition());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

