// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6033.GearRobot2017;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc6033.GearRobot2017.util.*;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveLeft;
    public static SpeedController driveRight;
    public static RobotDrive driveMotors;
    public static Encoder driveEncoderLeft;
    public static Encoder driveEncoderRight;
    public static Ultrasonic drivesonarFront;
    public static SpeedController shooterMotor;
    public static SpeedController climberMotor;
    public static DoubleSolenoid gearGrabReleaseSolonoid;
    public static PowerDistributionPanel powerPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static SonarMB1010 driveSonarFront;
	public static ADXRS450_Gyro driveGyro;

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveLeft = new VictorSP(1);
        LiveWindow.addActuator("Drive", "Left", (VictorSP) driveLeft);
        
        driveRight = new VictorSP(0);
        LiveWindow.addActuator("Drive", "Right", (VictorSP) driveRight);
        
        driveMotors = new RobotDrive(driveLeft, driveRight);
        
        driveMotors.setSafetyEnabled(false);
        driveMotors.setExpiration(0.1);
        driveMotors.setSensitivity(0.5);
        driveMotors.setMaxOutput(1.0);

        driveEncoderLeft = new Encoder(0, 1, true, EncodingType.k1X);
        LiveWindow.addSensor("Drive", "EncoderLeft", driveEncoderLeft);
        driveEncoderLeft.setDistancePerPulse(0.053855829);
        driveEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        driveEncoderRight = new Encoder(2, 3, false, EncodingType.k1X);
        LiveWindow.addSensor("Drive", "EncoderRight", driveEncoderRight);
        driveEncoderRight.setDistancePerPulse(0.053855829);
        driveEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        drivesonarFront = new Ultrasonic(4, 5);
        drivesonarFront.setAutomaticMode(true);
        LiveWindow.addSensor("Drive", "sonarFront", drivesonarFront);
        
        shooterMotor = new VictorSP(3);
        LiveWindow.addActuator("Shooter", "Motor", (VictorSP) shooterMotor);
        
        climberMotor = new Spark(2);
        LiveWindow.addActuator("Climber", "Motor", (Spark) climberMotor);
        
        gearGrabReleaseSolonoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Gear", "GrabReleaseSolonoid", gearGrabReleaseSolonoid);
        
        powerPanel = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Power", "Panel", powerPanel);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSonarFront = new SonarMB1010(0);
		LiveWindow.addSensor("Drive", "SonarFront", driveSonarFront);

		//driveGyro = new GyroADXRS453();
		driveGyro = new ADXRS450_Gyro();
		LiveWindow.addSensor("Drive", "Gyro", driveGyro);
		driveGyro.calibrate();
	}
}
